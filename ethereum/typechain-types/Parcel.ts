/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Parcel {
  export type ParcelDataStruct = {
    id: BigNumberish;
    price: BigNumberish;
    state: string;
    city: string;
    clientFullName: string;
    clientPhoneNumber: string;
  };

  export type ParcelDataStructOutput = [
    id: bigint,
    price: bigint,
    state: string,
    city: string,
    clientFullName: string,
    clientPhoneNumber: string
  ] & {
    id: bigint;
    price: bigint;
    state: string;
    city: string;
    clientFullName: string;
    clientPhoneNumber: string;
  };

  export type ParcelHistoryItemStruct = {
    parcelId: BigNumberish;
    status: string;
    timestamp: BigNumberish;
    updatedBy: AddressLike;
  };

  export type ParcelHistoryItemStructOutput = [
    parcelId: bigint,
    status: string,
    timestamp: bigint,
    updatedBy: string
  ] & {
    parcelId: bigint;
    status: string;
    timestamp: bigint;
    updatedBy: string;
  };
}

export interface ParcelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createParcel"
      | "getParcel"
      | "getParcelHistory"
      | "getParcels"
      | "parcelCount"
      | "parcelHistory"
      | "parcels"
      | "updateParcelStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ParcelCreated" | "ParcelStatusUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createParcel",
    values: [BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getParcel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParcelHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParcels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parcelCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parcelHistory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parcels",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParcelStatus",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createParcel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParcel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParcelHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParcels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parcelCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parcelHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parcels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateParcelStatus",
    data: BytesLike
  ): Result;
}

export namespace ParcelCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    price: BigNumberish,
    state: string,
    city: string,
    clientFullName: string,
    clientPhoneNumber: string
  ];
  export type OutputTuple = [
    id: bigint,
    price: bigint,
    state: string,
    city: string,
    clientFullName: string,
    clientPhoneNumber: string
  ];
  export interface OutputObject {
    id: bigint;
    price: bigint;
    state: string;
    city: string;
    clientFullName: string;
    clientPhoneNumber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParcelStatusUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    status: string,
    timestamp: BigNumberish,
    updatedBy: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    status: string,
    timestamp: bigint,
    updatedBy: string
  ];
  export interface OutputObject {
    id: bigint;
    status: string;
    timestamp: bigint;
    updatedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Parcel extends BaseContract {
  connect(runner?: ContractRunner | null): Parcel;
  waitForDeployment(): Promise<this>;

  interface: ParcelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createParcel: TypedContractMethod<
    [
      _price: BigNumberish,
      _state: string,
      _city: string,
      _clientFullName: string,
      _clientPhoneNumber: string
    ],
    [void],
    "nonpayable"
  >;

  getParcel: TypedContractMethod<
    [_id: BigNumberish],
    [Parcel.ParcelDataStructOutput],
    "view"
  >;

  getParcelHistory: TypedContractMethod<
    [_id: BigNumberish],
    [Parcel.ParcelHistoryItemStructOutput[]],
    "view"
  >;

  getParcels: TypedContractMethod<
    [],
    [Parcel.ParcelDataStructOutput[]],
    "view"
  >;

  parcelCount: TypedContractMethod<[], [bigint], "view">;

  parcelHistory: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint, string] & {
        parcelId: bigint;
        status: string;
        timestamp: bigint;
        updatedBy: string;
      }
    ],
    "view"
  >;

  parcels: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, string] & {
        id: bigint;
        price: bigint;
        state: string;
        city: string;
        clientFullName: string;
        clientPhoneNumber: string;
      }
    ],
    "view"
  >;

  updateParcelStatus: TypedContractMethod<
    [_id: BigNumberish, _status: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createParcel"
  ): TypedContractMethod<
    [
      _price: BigNumberish,
      _state: string,
      _city: string,
      _clientFullName: string,
      _clientPhoneNumber: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getParcel"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [Parcel.ParcelDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParcelHistory"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [Parcel.ParcelHistoryItemStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParcels"
  ): TypedContractMethod<[], [Parcel.ParcelDataStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "parcelCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "parcelHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint, string] & {
        parcelId: bigint;
        status: string;
        timestamp: bigint;
        updatedBy: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "parcels"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, string] & {
        id: bigint;
        price: bigint;
        state: string;
        city: string;
        clientFullName: string;
        clientPhoneNumber: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateParcelStatus"
  ): TypedContractMethod<
    [_id: BigNumberish, _status: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ParcelCreated"
  ): TypedContractEvent<
    ParcelCreatedEvent.InputTuple,
    ParcelCreatedEvent.OutputTuple,
    ParcelCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ParcelStatusUpdated"
  ): TypedContractEvent<
    ParcelStatusUpdatedEvent.InputTuple,
    ParcelStatusUpdatedEvent.OutputTuple,
    ParcelStatusUpdatedEvent.OutputObject
  >;

  filters: {
    "ParcelCreated(uint256,uint256,string,string,string,string)": TypedContractEvent<
      ParcelCreatedEvent.InputTuple,
      ParcelCreatedEvent.OutputTuple,
      ParcelCreatedEvent.OutputObject
    >;
    ParcelCreated: TypedContractEvent<
      ParcelCreatedEvent.InputTuple,
      ParcelCreatedEvent.OutputTuple,
      ParcelCreatedEvent.OutputObject
    >;

    "ParcelStatusUpdated(uint256,string,uint256,address)": TypedContractEvent<
      ParcelStatusUpdatedEvent.InputTuple,
      ParcelStatusUpdatedEvent.OutputTuple,
      ParcelStatusUpdatedEvent.OutputObject
    >;
    ParcelStatusUpdated: TypedContractEvent<
      ParcelStatusUpdatedEvent.InputTuple,
      ParcelStatusUpdatedEvent.OutputTuple,
      ParcelStatusUpdatedEvent.OutputObject
    >;
  };
}
